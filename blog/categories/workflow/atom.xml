<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: workflow | kgn]]></title>
  <link href="http://kgn.github.com/blog/categories/workflow/atom.xml" rel="self"/>
  <link href="http://kgn.github.com/"/>
  <updated>2012-03-15T22:07:24-07:00</updated>
  <id>http://kgn.github.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Photoshop Setup]]></title>
    <link href="http://kgn.github.com/blog/2012/03/15/my-photoshop-setup/"/>
    <updated>2012-03-15T00:55:00-07:00</updated>
    <id>http://kgn.github.com/blog/2012/03/15/my-photoshop-setup</id>
    <content type="html"><![CDATA[<p>I am a minimalist, it helps me stay focused free of clutter and distraction. There is a lot of clutter in Photoshop that I try to trim down as much as possible. I've also picked up a lot of plugins and best practices over the years that I'd like to share to help improve your Photoshop workflow for interface design.</p>

<!-- more -->


<p>First of all I keep a very clean UI with locked elements. If you drag a panel, like the layers, to a screen edge it will lock to that edge. So I have the tools locked to the left and layers locked to the right. The number of layers in my documents get huge so I like to give layers as much room as possible so I don't put any panels above or below them. There are a couple of other panels I use frequently that I have locked to the layers panel but minimized. This keeps them out of the way but clicking on the icon shows the full panel, then I can simply click on the icon again to dismiss it.</p>

<p><img class="center" src="http://kgn.github.com/content/photoshop/layout.png"></p>

<p>I also hide the <em>Application Bar</em>, I have no use for this bar and so hiding it frees up some useful space. You need all the pixels you can get when designing retina apps!</p>

<p><img class="center" src="http://kgn.github.com/content/photoshop/appbar.png"></p>

<p>Going down the list of <em>hidden</em> panels, first are my actions. I don't use any of my own actions because <a href="http://twitter.com/marcedwards">Marc Edwards</a> has made <a href="http://bjango.com/articles/actions/">actions</a> for everything I've needed! The one I used the most is <code>Don't colour manage</code> I run that constantly to make sure my documents don't contain any color profiles.</p>

<p><img class="center" src="http://kgn.github.com/content/photoshop/actions.png"></p>

<p>There are some shadow actions that are from <a href="http://dribbble.com/Norm">Norm</a>'s <a href="http://www.uiparade.com/ui-toolkit">UI Toolkit</a>. This leads nicely into the styles I use, also from Norm ;) I removed all the Adobe provided ones cause they are crap, I've done this everywhere where there are Adobe examples: gradients, patternsâ€¦</p>

<p><img class="center" src="http://kgn.github.com/content/photoshop/styles.png"></p>

<p>Next are the panel for text, they are the standard ones, nothing exciting but useful to be able to quickly pull up and make changes.</p>

<p>Next we get to my favorite Photoshop extension <a href="http://guideguide.me/">GuideGuide</a> by <a href="http://www.cameronmcefee.com">Cameron McEfee</a>. This extension helps you place guides and make grids, so useful for building and laying out interfaces in Photoshop!</p>

<p><img class="center" src="http://kgn.github.com/content/photoshop/guideguide.png"></p>

<p>Last, my newest addition to the panel, a new extension that adds an awesome new color picker to Photoshop: <a href="http://theindustry.cc/2012/03/13/coolorus-color-picker-for-photoshop">Coolorus</a>.</p>

<p><img class="center" src="http://kgn.github.com/content/photoshop/coolorus.png"></p>

<p>Almost everything I do in Photoshop revolves around pixel perfect vectors, one of the best ways to achieve pixel perfection is to use the <code>Snap to Pixels</code> option on most of the vector shapes.</p>

<p><img class="center" src="http://kgn.github.com/content/photoshop/snap.png"></p>

<p>Unfortunately this option is not on all of the shapes, most notably circles. So to draw circles that snap to pixels I keep my radius ridiculously high which produces pixel perfect circles.</p>

<p>Norm's UI Toolkit includes some great custom shapes that I use a lot, especially the social media icons.</p>

<p><img class="center" src="http://kgn.github.com/content/photoshop/shapes.png"></p>

<p>I hope this was useful and I hope to put together some more Photoshop tips. If you haven't already read the articles on <a href="http://bjango.com/articles/">bjango.com</a> stop what you are doing an go read them all right now!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Git Workflow]]></title>
    <link href="http://kgn.github.com/blog/2012/02/29/my-git-workflow/"/>
    <updated>2012-02-29T21:01:00-08:00</updated>
    <id>http://kgn.github.com/blog/2012/02/29/my-git-workflow</id>
    <content type="html"><![CDATA[<p>I love <a href="http://git-scm.com">git</a> and <a href="http://github.com">Github</a>, I originally started out with svn then moved to <a href="http://mercurial.selenic.com/">mercurial</a> and even contributed and was an admin on a mercurial app called <a href="https://bitbucket.org/snej/murky/wiki/Home">Murky</a>. But then it became clear that git, with the help of Github, had won. It was added to Xcode 4 and even before that most iOS and web projects were hosted on Github. So I made the switch and never looked back!</p>

<!-- more -->


<p>I've been using git for almost 2 years now and I'd like to share some of the tricks I've gathered up and how I work with it. I unfortunately have a quite fragmented workflow split between the command line and two apps, but this allows me to use the best tool for the job. Hopefully this post will give you some new arrows for your git quiver.</p>

<h3>Command Line</h3>

<p>I use the command line for most things branching, merging, checking out new repos and other commands that I don't want a higher level tool handling for me, I wanna know exactly what's going on. I use a lot of aliases to help this workflow go faster and to remind me of some of git's more <em>cryptic</em> commands.</p>

<p>This is what my global config looks like:</p>

<p><div><script src='https://gist.github.com/760788.js?file=.gitconfig'></script>
<noscript><pre><code>[alias]
    cl = clone --recursive
    un = reset --hard
    st = status -s
    aa = add --all
    ci = commit -m
    co = checkout
    cob = checkout -b
    br = branch
    rbr = branch -r
    rmrb = push --delete origin # delete a remote branch
    rp = remote prune origin # cleanup stale remote branch refs
    pr = pull --rebase
    ms = merge --squash
    sub = submodule add
    subup = submodule update --init
    dft = difftool
    lg = log --graph --format='%C(red)%h%C(reset) -%C(yellow)%d%C(reset) %s \
	%C(green)(%cr) %C(bold blue)&lt;%an&gt;%C(reset)' --date=relative
[core]
	quotepath = false
[color]
	diff = auto
	status = auto
	branch = auto
</code></pre></noscript></div>
</p>

<p>I also use a custom <code>PS1</code> line that shows me which directory I'm in, the current branch if I'm in a git repo, and if there are any uncommitted changes.</p>

<pre><code>username@machine[dir](*master)$
</code></pre>

<p><div><script src='https://gist.github.com/760788.js?file=.profile'></script>
<noscript><pre><code>alias cleansvn='find . -name &quot;.svn&quot; -type d -exec rm -rf {} \;'
alias cleanhg='find . -name &quot;*.orig&quot; -exec rm -rf {} \;'
alias cleanwin='find . -type f -name &quot;*.lnk&quot; -delete; find . -type f -name &quot;Thumbs.db&quot; -delete; find . -type f -name &quot;thumbs.db&quot; -delete;'
alias cleanosx='find . -name &quot;.DS_Store&quot; -type f -exec rm -rf {} \;'

#open all files with a given extension under the current directory
openfiles () { find . -name &quot;*.$1&quot; -type f | xargs open; }

#find files with the given extension that contain the search string
findinfiles () { grep -r --include &quot;*.$1&quot; &quot;$2&quot; --ignore-case .; }

#open files that the string was found in
openfindinfiles () { grep -r --include &quot;*.$1&quot; &quot;$2&quot; --ignore-case --files-with-matches . | xargs open; }

# Inspired by: http://henrik.nyh.se/2008/12/git-dirty-prompt
function parse_git_dirty {
  [[ $(git status 2&gt; /dev/null | tail -n1) != &quot;nothing to commit (working directory clean)&quot; ]] &amp;&amp; echo &quot;*&quot;
}
function parse_git_branch {
  git branch --no-color 2&gt; /dev/null | sed -e '/^[^*]/d' -e &quot;s/* \(.*\)/($(parse_git_dirty)\1)/&quot;
}

# username@machine[dir](master)$   # clean working directory
# username@machine[dir](*master)$  # dirty working directory
export PS1='\u@\h[$(basename &quot;${PWD}&quot;)]$(parse_git_branch)\$ ' 
</code></pre></noscript></div>
</p>

<h3>Gitbox</h3>

<p><a href="http://gitboxapp.com">Gitbox</a> is the newest addition to my git workflow. I had looked at it a while ago and it didn't really appeal to me, however the latest version added support for <a href="http://book.git-scm.com/5_submodules.html">submodules</a> which I use in almost every project! This feature is so awesome to be able to visualize what submodules the project is using and what state they are in.</p>

<p><img class="center" src="http://kgn.github.com/content/git/gitbox.png"></p>

<p>It's also really nice for managing multiple git repositories because you can see them all in the list view. There are lots of other great features so be sure to check out the <a href="http://gitboxapp.com">Gitbox site</a>.</p>

<h3>GitX</h3>

<p>GitX is the original Mac git clients. I know a lot of people have switched over to using Gitbox, <a href="http://mac.github.com/">Github's Mac app</a>, or <a href="http://www.sourcetreeapp.com/">SourceTree</a> but for me GitX is still the best! Even with Gitbox I still use GitX to stage my commits because it has a great diff view that makes it easy to stage chunks or even individual lines.</p>

<p><img class="center" src="http://kgn.github.com/content/git/gitx.png"></p>

<p>Another subtile but great feature of GitX's commit view is the grey line in the commit box. I wasn't sure what this was for until I read <a href="http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">this post</a> about formatting git commits. The first line of a git commit is called the <em>subject</em> and it is used in several of the command line tools like log. It is recommended that the first line of a git commit be less than 50 characters long for readability on the command line and this grey line indicates where that cutoff is!</p>

<p><img class="center" src="http://kgn.github.com/content/git/log.png"></p>

<p>I use <a href="https://github.com/kgn/gitx">my own fork</a> of <a href="http://brotherbard.com/blog/2010/03/experimental-gitx-fork/">Brotherbards's GitX</a> where I've added Lion fullscreen support and changed the commit hotkey to <code>âŒ˜+enter</code>.</p>

<h3>Looking forward</h3>

<p>I've talked to Oleg, the developer of Gitbox, and he's told me that a diff view is coming to Gitbox that will hopefully have similar functionality to GitX's! I can't wait for this so I can hopefully whittle my workflow down to just command line and Gitbox.</p>
]]></content>
  </entry>
  
</feed>
