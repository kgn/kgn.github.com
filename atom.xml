<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[kgn]]></title>
  <link href="http://kgn.github.com/atom.xml" rel="self"/>
  <link href="http://kgn.github.com/"/>
  <updated>2012-03-22T23:35:45-07:00</updated>
  <id>http://kgn.github.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Caching Drawing Code]]></title>
    <link href="http://kgn.github.com/blog/2012/03/21/caching-drawing-code/"/>
    <updated>2012-03-21T20:52:00-07:00</updated>
    <id>http://kgn.github.com/blog/2012/03/21/caching-drawing-code</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been doing more and more drawing in code in my Cocoa projects recently and I&#8217;d like to share some tips, specifically how to cache drawing code into images for faster redraw. I&#8217;ve created a simple project for this post, the source of which can be found on <a href="https://github.com/kgn/PaintCodeExample">GitHub</a>.</p>

<!-- more -->


<p>This project is very straight forward, there is a button that when pressed shows a popup that appears for a bit then dismisses it&#8217;s self. There isn&#8217;t a single image in the project it&#8217;s all drawn in code!</p>

<p><img class="center" src="http://kgn.github.com/content/drawing/animation.gif"></p>

<p>The drawing code in this project was <em>painted</em> with <a href="http://theindustry.cc/2012/03/21/paintcode-paint-cocoa-drawing-code">PaintCode</a>, a great new mac app for generating OS X and iOS drawing code.</p>

<p>Drawing in code has several advantages, your app will take up less disk space because it doesn&#8217;t have to ship with as many images. Depending on the drawing it can be easier to change a couple color values then it is to re-export a bunch of images. It also makes it easier to support multi-resolution displays because the drawing code will scale up and you don&#8217;t need to manage 1x and 2x images.</p>

<p><img class="center" src="http://kgn.github.com/content/drawing/multires.png"></p>

<p>However drawing in code can cause performance issues because every time <code>setNeedsDisplay</code> is called on a view the drawing code needs to re-evaluate. There are also cases where images are expected, like buttons and image views. Fortunately drawing code can be cached into images and used just like an image loaded off of disk (<em>thanks to <a href="http://twitter.com/badeen">@badeen</a> for originally turning me onto this approach</em>). I&#8217;ve put together a category for <code>UIImage</code> and <code>NSImage</code> in my <a href="https://github.com/kgn/BBlock">BBlock</a> project that makes creating images with drawing code easier.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UIImage *image = [UIImage imageForSize:CGSizeMake(32, 32) withDrawingBlock:^{
</span><span class='line'>    // Drawing codeâ€¦   
</span><span class='line'>}];</span></code></pre></td></tr></table></div></figure>


<p>This code will cache your drawing code into a <code>UIImage</code> that&#8217;s <code>32x32</code> or <code>64x64</code> on a retina display. The uprez for retina is automatically handled in this function, you can see what this function is doing <a href="https://github.com/kgn/BBlock/blob/master/UIImage%2BBBlock.m">here</a>.</p>

<h2>The example app</h2>

<p>Ok let&#8217;s jump into the code of the example app! As I said this app contains a button and a popup. The popup consists of a <code>UIView</code> that contains a <code>UIImageView</code> and <code>UILabel</code>. The <code>UILabel</code> is just a standard label, nothing fancy.</p>

<p><img class="center" src="http://kgn.github.com/content/drawing/layout.png"></p>

<p>In <code>viewDidLoad</code> the image displayed in the popup&#8217;s <code>UIImageView</code> is set to <code>[self popupImage]</code> and the normal and highlight image for the button are set to <code>[self debutsImage]</code> and <code>[self debutsHighlightedImage]</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)viewDidLoad{
</span><span class='line'>    [super viewDidLoad];
</span><span class='line'>    
</span><span class='line'>    [self.popupImageView setImage:[self popupImage]];    
</span><span class='line'>    
</span><span class='line'>    [self.debutsButton setImage:[self debutsImage] forState:UIControlStateNormal];
</span><span class='line'>    [self.debutsButton setImage:[self debutsHighlightedImage] forState:UIControlStateHighlighted];    
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><em>In the <code>viewDidLoad</code> of the example app there is also some code to setup the popup for animation, but that&#8217;s not important to this post so it was left out of the above code snippet.</em></p>

<p>These functions, that return images, are defined in <a href="https://github.com/kgn/PaintCodeExample/blob/master/PaintCodeExample/PCViewController%2BPaintCode.m">PCViewController+PaintCode.m</a>. The drawing code was split out into it&#8217;s own category so the 500 lines of drawing code doesn&#8217;t clutter the main view controller found in <a href="https://github.com/kgn/PaintCodeExample/blob/master/PaintCodeExample/PCViewController.m">PCViewController.m</a>.</p>

<p>The structure of these functions is similar but with different drawing code, for example here is an abridged version of <code>popupImage</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (UIImage *)popupImage{
</span><span class='line'>    static UIImage *image = nil;
</span><span class='line'>    if(image == nil){
</span><span class='line'>        image = [UIImage imageForSize:CGSizeMake(120, 60) withDrawingBlock:^{
</span><span class='line'>            // Drawing code...
</span><span class='line'>        }];
</span><span class='line'>    }
</span><span class='line'>    return image;</span></code></pre></td></tr></table></div></figure>


<p>This code uses the <code>BBlock</code> method mentioned above to draw into an image that&#8217;s <code>120x60</code>, the resulting image is stored in a <code>static UIImage</code> so we can call this method multiple times and we will always get the same <code>UIImage</code>. If we used this technique for an image in a table view without the <code>static</code> we wouldn&#8217;t get any savings from caching the code in a <code>UIImage</code> because the drawing code would be evaluated whenever the function was called which would be every time a row needed to be redrawn.</p>

<p>This also lets us get a little tricky in <code>debutsHighlightedImage</code>. The highlight state of this button is the same icon as the normal state, but with a pink glow. So we can draw the glow and then draw the <code>debutsImage</code> ontop of it!</p>

<p><img class="center" src="http://kgn.github.com/content/drawing/buttonicons.png"></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (UIImage *)debutsHighlightedImage{
</span><span class='line'>    static UIImage *image = nil;
</span><span class='line'>    if(image == nil){
</span><span class='line'>        CGSize imageSize = CGSizeMake(42, 42);
</span><span class='line'>        image = [UIImage imageForSize:imageSize withDrawingBlock:^{
</span><span class='line'>            // Drawing code for the pink glow...
</span><span class='line'>            
</span><span class='line'>            // Draw the debuts image ontop of the glow
</span><span class='line'>            CGRect imageRect = CGRectZero;
</span><span class='line'>            imageRect.size = imageSize;
</span><span class='line'>            [[self debutsImage] drawInRect:imageRect];
</span><span class='line'>        }]; 
</span><span class='line'>    }
</span><span class='line'>    return image;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Again because the image returned from <code>debutsImage</code> is <code>static</code> the drawing code will only be evaluated once so we are free to use this function multiple times without paying for multiple evaluations of the drawing code.</p>

<h2>Conclusion</h2>

<p>There are lots of other ways to used drawing code cached into images. In apps where I&#8217;ve written my own <code>drawRect</code> method I&#8217;ve used a similar approach where I cache the drawing code into an image and then draw that image into the rect, stretching it, tiling it, or creating an image that fills the view and drawing that.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)drawRect:(CGRect)rect{
</span><span class='line'>    static UIImage *image = nil;
</span><span class='line'>    if(image == nil){
</span><span class='line'>        image = [UIImage imageForSize:self.bounds withDrawingBlock:^{
</span><span class='line'>            // Drawing code...
</span><span class='line'>        }];
</span><span class='line'>    }
</span><span class='line'>    [image drawInRect:self.bounds];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><em>This code example only works for static views were the size doesn&#8217;t change. If the size of the view changed there would need to be some sort of cache invalidation, like storing and comparing the size of the view. Also <code>static</code> couldn&#8217;t be used, but you could use a <code>UIImage</code> ivar instead.</em></p>

<p>Obviously it&#8217;s not possible to cache everything, like a gradient in a widget that scales horizontally and vertically, but as much as possible it&#8217;s a win to cache drawing code into images.</p>

<p>Hit me up on twitter(<a href="http://twitter.com/_kgn">@_kgn</a>) if you want to discuss this post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nest]]></title>
    <link href="http://kgn.github.com/blog/2012/03/15/nest/"/>
    <updated>2012-03-15T21:34:00-07:00</updated>
    <id>http://kgn.github.com/blog/2012/03/15/nest</id>
    <content type="html"><![CDATA[<p>I got my <a href="http://nest.com">nest</a> today! I was on the waiting list and a week ago I got an email letting me know that I could order a nest so I jumped at the chance to have this beautiful and smart device on my wall, it&#8217;s like a piece of art :)</p>

<!-- more -->


<p>The design is beautiful so I&#8217;d like to share some pictures of the unboxing an instillation.</p>

<p><img class="center" src="http://kgn.github.com/content/nest/box.jpg"></p>

<p>The design of the packaging is very nice with a clean and earthy enviormental feel.</p>

<p>When you first open the box you are greeted right away with the nest device.</p>

<p><img class="center" src="http://kgn.github.com/content/nest/open.jpg"></p>

<p>Underneath this is the rest of the contents, everything you need to install the nest, even a cute little screwdriver.</p>

<p><img class="center" src="http://kgn.github.com/content/nest/contents.jpg"></p>

<p>The instillation starts by turning off the power and marking the wires. The nest comes with useful stickers you can use to keep track of which wires are which.</p>

<p><img class="center" src="http://kgn.github.com/content/nest/wires.jpg"></p>

<p>The nest can be mounted right on the wall but unfortunately my old thermostat left holes in the wall that poked out around the nest&#8217;s sleek circle. Luckily nest comes with two mounting plates, a square one and a rectangular one. I chose the rectangular one in a portrait position because that looked best to me :)</p>

<p><img class="center" src="http://kgn.github.com/content/nest/new_wires.jpg"></p>

<p>A great design and attention to detail feature of the nest is the built in level on the mount, this makes it so easy to make sure you&#8217;re nest display will be straight!</p>

<p>I got a little hung up on this part because my heating setup has one <code>R</code> wire and the nest has two: <code>Rh</code> and <code>Rc</code>. Not wanting to hook things up wrong I gave support a call. After two key presses I was talking to a live person who let me know that with my setup I could use either <code>R</code> connector. He then stayed on the line until I was done with the rest of the installation, great service!</p>

<p><img class="center" src="http://kgn.github.com/content/nest/final.jpg"></p>

<p>It looks great on the wall and it has a great user interface. You spin the ring around the face, then lightly press the entire face to select, kinda like an iPod :)</p>

<p>Besides the beauty and machine learning I was looking forward to using the <a href="http://itunes.apple.com/us/app/nest-mobile/id464988855?mt=8">iPhone and iPad app</a>. My thermostat is downstairs so it&#8217;s so great to be able to control it from bed or while I&#8217;m out of the house incase I forget to turn it down. We are living in the future!</p>

<p><img class="center" src="http://kgn.github.com/content/nest/iPhone.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Photoshop Setup]]></title>
    <link href="http://kgn.github.com/blog/2012/03/15/my-photoshop-setup/"/>
    <updated>2012-03-15T00:55:00-07:00</updated>
    <id>http://kgn.github.com/blog/2012/03/15/my-photoshop-setup</id>
    <content type="html"><![CDATA[<p>I am a minimalist, it helps me stay focused free of clutter and distraction. There is a lot of clutter in Photoshop that I try to trim down as much as possible. I&#8217;ve also picked up a lot of plugins and best practices over the years that I&#8217;d like to share to help improve your Photoshop workflow for interface design.</p>

<!-- more -->


<p>First of all I keep a very clean UI with locked elements. If you drag a panel, like the layers, to a screen edge it will lock to that edge. So I have the tools locked to the left and layers locked to the right. The number of layers in my documents get huge so I like to give layers as much room as possible so I don&#8217;t put any panels above or below them. There are a couple of other panels I use frequently that I have locked to the layers panel but minimized. This keeps them out of the way but clicking on the icon shows the full panel, then I can simply click on the icon again to dismiss it.</p>

<p><img class="center" src="http://kgn.github.com/content/photoshop/layout.png"></p>

<p>I also hide the <em>Application Bar</em>, I have no use for this bar and so hiding it frees up some useful space. You need all the pixels you can get when designing retina apps!</p>

<p><img class="center" src="http://kgn.github.com/content/photoshop/appbar.png"></p>

<p>Going down the list of <em>hidden</em> panels, first are my actions. I don&#8217;t use any of my own actions because <a href="http://twitter.com/marcedwards">Marc Edwards</a> has made <a href="http://bjango.com/articles/actions/">actions</a> for everything I&#8217;ve needed! The one I used the most is <code>Don't colour manage</code> I run that constantly to make sure my documents don&#8217;t contain any color profiles.</p>

<p><img class="center" src="http://kgn.github.com/content/photoshop/actions.png"></p>

<p>There are some shadow actions that are from <a href="http://dribbble.com/Norm">Norm</a>&#8217;s <a href="http://www.uiparade.com/ui-toolkit">UI Toolkit</a>. This leads nicely into the styles I use, also from Norm ;) I removed all the Adobe provided ones cause they are crap, I&#8217;ve done this everywhere where there are Adobe examples: gradients, patternsâ€¦</p>

<p><img class="center" src="http://kgn.github.com/content/photoshop/styles.png"></p>

<p>Next are the panel for text, they are the standard ones, nothing exciting but useful to be able to quickly pull up and make changes.</p>

<p>Next we get to my favorite Photoshop extension <a href="http://guideguide.me/">GuideGuide</a> by <a href="http://www.cameronmcefee.com">Cameron McEfee</a>. This extension helps you place guides and make grids, so useful for building and laying out interfaces in Photoshop!</p>

<p><img class="center" src="http://kgn.github.com/content/photoshop/guideguide.png"></p>

<p>Last, my newest addition to the panel, a new extension that adds an awesome new color picker to Photoshop: <a href="http://theindustry.cc/2012/03/13/coolorus-color-picker-for-photoshop">Coolorus</a>.</p>

<p><img class="center" src="http://kgn.github.com/content/photoshop/coolorus.png"></p>

<p>Almost everything I do in Photoshop revolves around pixel perfect vectors, one of the best ways to achieve pixel perfection is to use the <code>Snap to Pixels</code> option on most of the vector shapes.</p>

<p><img class="center" src="http://kgn.github.com/content/photoshop/snap.png"></p>

<p>Unfortunately this option is not on all of the shapes, most notably circles. So to draw circles that snap to pixels I keep my radius ridiculously high which produces pixel perfect circles.</p>

<p>Norm&#8217;s UI Toolkit includes some great custom shapes that I use a lot, especially the social media icons.</p>

<p><img class="center" src="http://kgn.github.com/content/photoshop/shapes.png"></p>

<p>I hope this was useful and I hope to put together some more Photoshop tips. If you haven&#8217;t already read the articles on <a href="http://bjango.com/articles/">bjango.com</a> stop what you are doing an go read them all right now!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Git Workflow]]></title>
    <link href="http://kgn.github.com/blog/2012/02/29/my-git-workflow/"/>
    <updated>2012-02-29T21:01:00-08:00</updated>
    <id>http://kgn.github.com/blog/2012/02/29/my-git-workflow</id>
    <content type="html"><![CDATA[<p>I love <a href="http://git-scm.com">git</a> and <a href="http://github.com">Github</a>, I originally started out with svn then moved to <a href="http://mercurial.selenic.com/">mercurial</a> and even contributed and was an admin on a mercurial app called <a href="https://bitbucket.org/snej/murky/wiki/Home">Murky</a>. But then it became clear that git, with the help of Github, had won. It was added to Xcode 4 and even before that most iOS and web projects were hosted on Github. So I made the switch and never looked back!</p>

<!-- more -->


<p>I&#8217;ve been using git for almost 2 years now and I&#8217;d like to share some of the tricks I&#8217;ve gathered up and how I work with it. I unfortunately have a quite fragmented workflow split between the command line and two apps, but this allows me to use the best tool for the job. Hopefully this post will give you some new arrows for your git quiver.</p>

<h3>Command Line</h3>

<p>I use the command line for most things branching, merging, checking out new repos and other commands that I don&#8217;t want a higher level tool handling for me, I wanna know exactly what&#8217;s going on. I use a lot of aliases to help this workflow go faster and to remind me of some of git&#8217;s more <em>cryptic</em> commands.</p>

<p>This is what my global config looks like:</p>

<div><script src='https://gist.github.com/760788.js?file=.gitconfig'></script>
<noscript><pre><code>[alias]
    cl = clone --recursive
    un = reset --hard
    st = status -s
    aa = add --all
    ci = commit -m
    co = checkout
    cob = checkout -b
    br = branch
    rbr = branch -r
    rmrb = push --delete origin # delete a remote branch
    rp = remote prune origin # cleanup stale remote branch refs
    pr = pull --rebase
    ms = merge --squash
    sub = submodule add
    subup = submodule update --init
    dft = difftool
    lg = log --graph --format='%C(red)%h%C(reset) -%C(yellow)%d%C(reset) %s \
    %C(green)(%cr) %C(bold blue)&lt;%an&gt;%C(reset)' --date=relative
[core]
    quotepath = false
[color]
    diff = auto
    status = auto
    branch = auto
</code></pre></noscript></div>


<p>I also use a custom <code>PS1</code> line that shows me which directory I&#8217;m in, the current branch if I&#8217;m in a git repo, and if there are any uncommitted changes.</p>

<pre><code>username@machine[dir](*master)$
</code></pre>

<div><script src='https://gist.github.com/760788.js?file=.profile'></script>
<noscript><pre><code>alias cleansvn='find . -name &quot;.svn&quot; -type d -exec rm -rf {} \;'
alias cleanhg='find . -name &quot;*.orig&quot; -exec rm -rf {} \;'
alias cleanwin='find . -type f -name &quot;*.lnk&quot; -delete; find . -type f -name &quot;Thumbs.db&quot; -delete; find . -type f -name &quot;thumbs.db&quot; -delete;'
alias cleanosx='find . -name &quot;.DS_Store&quot; -type f -exec rm -rf {} \;'

#open all files with a given extension under the current directory
openfiles () { find . -name &quot;*.$1&quot; -type f | xargs open; }

#find files with the given extension that contain the search string
findinfiles () { grep -r --include &quot;*.$1&quot; &quot;$2&quot; --ignore-case .; }

#open files that the string was found in
openfindinfiles () { grep -r --include &quot;*.$1&quot; &quot;$2&quot; --ignore-case --files-with-matches . | xargs open; }

# Inspired by: http://henrik.nyh.se/2008/12/git-dirty-prompt
function parse_git_dirty {
  [[ $(git status 2&gt; /dev/null | tail -n1) != &quot;nothing to commit (working directory clean)&quot; ]] &amp;&amp; echo &quot;*&quot;
}
function parse_git_branch {
  git branch --no-color 2&gt; /dev/null | sed -e '/^[^*]/d' -e &quot;s/* \(.*\)/($(parse_git_dirty)\1)/&quot;
}

# username@machine[dir](master)$   # clean working directory
# username@machine[dir](*master)$  # dirty working directory
export PS1='\u@\h[$(basename &quot;${PWD}&quot;)]$(parse_git_branch)\$ ' 
</code></pre></noscript></div>


<h3>Gitbox</h3>

<p><a href="http://gitboxapp.com">Gitbox</a> is the newest addition to my git workflow. I had looked at it a while ago and it didn&#8217;t really appeal to me, however the latest version added support for <a href="http://book.git-scm.com/5_submodules.html">submodules</a> which I use in almost every project! This feature is so awesome to be able to visualize what submodules the project is using and what state they are in.</p>

<p><img class="center" src="http://kgn.github.com/content/git/gitbox.png"></p>

<p>It&#8217;s also really nice for managing multiple git repositories because you can see them all in the list view. There are lots of other great features so be sure to check out the <a href="http://gitboxapp.com">Gitbox site</a>.</p>

<h3>GitX</h3>

<p>GitX is the original Mac git clients. I know a lot of people have switched over to using Gitbox, <a href="http://mac.github.com/">Github&#8217;s Mac app</a>, or <a href="http://www.sourcetreeapp.com/">SourceTree</a> but for me GitX is still the best! Even with Gitbox I still use GitX to stage my commits because it has a great diff view that makes it easy to stage chunks or even individual lines.</p>

<p><img class="center" src="http://kgn.github.com/content/git/gitx.png"></p>

<p>Another subtile but great feature of GitX&#8217;s commit view is the grey line in the commit box. I wasn&#8217;t sure what this was for until I read <a href="http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">this post</a> about formatting git commits. The first line of a git commit is called the <em>subject</em> and it is used in several of the command line tools like log. It is recommended that the first line of a git commit be less than 50 characters long for readability on the command line and this grey line indicates where that cutoff is!</p>

<p><img class="center" src="http://kgn.github.com/content/git/log.png"></p>

<p>I use <a href="https://github.com/kgn/gitx">my own fork</a> of <a href="http://brotherbard.com/blog/2010/03/experimental-gitx-fork/">Brotherbards&#8217;s GitX</a> where I&#8217;ve added Lion fullscreen support and changed the commit hotkey to <code>âŒ˜+enter</code>.</p>

<h3>Looking forward</h3>

<p>I&#8217;ve talked to Oleg, the developer of Gitbox, and he&#8217;s told me that a diff view is coming to Gitbox that will hopefully have similar functionality to GitX&#8217;s! I can&#8217;t wait for this so I can hopefully whittle my workflow down to just command line and Gitbox.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play by Play: Featured by Apple]]></title>
    <link href="http://kgn.github.com/blog/2012/02/11/play-by-play-featured-by-apple/"/>
    <updated>2012-02-11T19:11:00-08:00</updated>
    <id>http://kgn.github.com/blog/2012/02/11/play-by-play-featured-by-apple</id>
    <content type="html"><![CDATA[<p>This week one of my dreams came true, <a href="http://playbyplayapp.com">Play by Play</a> was featured on the <strong>New and Noteworthy</strong> section of the <strong>Mac App Store</strong>!</p>

<!-- more -->


<p><img class="center" src="http://kgn.github.com/content/playbyplay/new+noteworthy.png"></p>

<p>On monday I received an email out of the blue from Apple requesting art assets for a potential promotion. I was so excited I put together the art and sent it off the same day!</p>

<p><img class="center" src="http://kgn.github.com/content/playbyplay/promo.png"></p>

<p>Unfortunately Apple didn&#8217;t use this art or make a custom App Store page, but that just leaves more to strive for for my next featured app :)</p>

<p>Besides being a great honor being featured is also great for business :) I didn&#8217;t make Play by Play for the money, and it&#8217;s not <em>killin it</em> by any stretch of the imagination, but I put a lot of time into this app and definitely want to see it do well. The app sold really well the first couple days, thanks in part to the amazing icon <a href="http://softfacade.com/">SoftFacade</a> created and posted on <a href="http://drbl.in/cBRY">Dribbble</a>. It dropped off after this until a review from <a href="http://mac.appstorm.net/reviews/graphics/dribbble-on-your-desktop-with-play-by-play/">Mac.AppStorm</a>. Then tapered off again and has stayed pretty constant until it was added to <em>New and Noteworthy</em>! It sold alright the first day, then doubled the second and it looks like it will sell about the same today, based on it&#8217;s ranking.</p>

<p><img class="center" src="http://kgn.github.com/content/playbyplay/graph.png"></p>

<p>With Play by Play I put the best of what I&#8217;ve learned over the past couple years as I refined how I design and develop apps, and the ride has been great so far! I&#8217;ve made new designer and developer friends, had great interactions with users, and being recognized by Apple is the icing on the cake :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Blog]]></title>
    <link href="http://kgn.github.com/blog/2012/02/11/octopress-blog/"/>
    <updated>2012-02-11T17:42:00-08:00</updated>
    <id>http://kgn.github.com/blog/2012/02/11/octopress-blog</id>
    <content type="html"><![CDATA[<p>Trying my hand at blogging again. I&#8217;ve been meaning to try out <a href="http://jekyllrb.com">Jekyll</a> and <a href="http://octopress.org">Octopress</a> for some time now and finally got it setup :)</p>
]]></content>
  </entry>
  
</feed>
